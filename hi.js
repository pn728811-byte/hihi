const canvasMatrix = document.getElementById('matrix');
const ctxMatrix = canvasMatrix.getContext('2d');
const canvasCountdown = document.getElementById('countdown');
const ctxCountdown = canvasCountdown.getContext('2d');

// H√†m resize ƒë·ªÉ canvas v·ª´a kh√≠t m√†n h√¨nh
function resizeCanvas() {
  canvasMatrix.width = window.innerWidth;
  canvasMatrix.height = window.innerHeight;
  canvasCountdown.width = window.innerWidth;
  canvasCountdown.height = window.innerHeight;
}
resizeCanvas();
window.addEventListener('resize', resizeCanvas);

// ---------- N·ªÄN K√ù T·ª∞ R∆†I ----------
const katakana = '„Ç¢„Ç´„Çµ„Çø„Éä„Éè„Éû„É§„É©„ÉØ„Ç§„Ç≠„Ç∑„ÉÅ„Éã„Éí„Éü„É™„Ç¶„ÇØ„Çπ„ÉÑ„Éå„Éï„É†„É¶„É´„Ç®„Ç±„Çª„ÉÜ„Éç„Éò„É°„É¨„Ç™„Ç≥„ÇΩ„Éà„Éé„Éõ„É¢„É®„É≠„É¥„É≥ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
const chars = katakana.split('');
const fontSize = 18;
let columns = canvasMatrix.width / fontSize;
let drops = Array(Math.floor(columns)).fill(1);

function drawMatrix() {
  ctxMatrix.fillStyle = 'rgba(0, 0, 0, 0.05)';
  ctxMatrix.fillRect(0, 0, canvasMatrix.width, canvasMatrix.height);
  ctxMatrix.font = fontSize + 'px monospace';
  drops.forEach((y, x) => {
    ctxMatrix.fillStyle = Math.random() > 0.5 ? '#ff0000' : '#00bfff';
    const text = chars[Math.floor(Math.random() * chars.length)];
    ctxMatrix.fillText(text, x * fontSize, y * fontSize);
    if (y * fontSize > canvasMatrix.height && Math.random() > 0.975) drops[x] = 0;
    drops[x]++;
  });
}
setInterval(drawMatrix, 33);

// ---------- HI·ªÜN CH·ªÆ TR∆Ø·ªöC KHI ƒê·∫æM NG∆Ø·ª¢C ----------
const preMessage = "ƒêi·ªÅu n√†y d√†nh cho Tr√† My.";
const preMessageElem = document.createElement("div");
preMessageElem.style.position = "fixed";
preMessageElem.style.top = "50%";
preMessageElem.style.left = "50%";
preMessageElem.style.transform = "translate(-50%, -50%)";
preMessageElem.style.color = "#ff4eb8";
preMessageElem.style.fontFamily = "monospace";
preMessageElem.style.fontSize = "28px";
preMessageElem.style.textAlign = "center";
preMessageElem.style.textShadow =
  "0 0 5px #ff4eb8, 0 0 10px #ff4eb8, 0 0 20px #ff4eb8, 0 0 30px #ff4eb8";
preMessageElem.style.zIndex = "30";
document.body.appendChild(preMessageElem);

async function showPreMessage() {
  preMessageElem.textContent = "";
  for (let i = 0; i < preMessage.length; i++) {
    preMessageElem.textContent += preMessage.charAt(i);
    await new Promise(r => setTimeout(r, 80)); // t·ªëc ƒë·ªô g√µ
  }
  await new Promise(r => setTimeout(r, 1000)); // ch·ªù 1s
  preMessageElem.remove();
}

// ---------- COUNTDOWN ----------
const numbers = ['3', '2', '1'];
let currentIndex = 0;

function drawNumberAsChars(number) {
  ctxCountdown.clearRect(0, 0, canvasCountdown.width, canvasCountdown.height);
  const tempCanvas = document.createElement('canvas');
  const tempCtx = tempCanvas.getContext('2d');
  tempCanvas.width = 300;
  tempCanvas.height = 300;
  tempCtx.fillStyle = '#fff';
  tempCtx.font = 'bold 250px monospace';
  tempCtx.textAlign = 'center';
  tempCtx.textBaseline = 'middle';
  tempCtx.fillText(number, tempCanvas.width / 2, tempCanvas.height / 2);

  const imageData = tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height);
  const particles = [];
  for (let y = 0; y < tempCanvas.height; y += 5) {
    for (let x = 0; x < tempCanvas.width; x += 5) {
      const index = (y * tempCanvas.width + x) * 4;
      if (imageData.data[index + 3] > 128) {
        const char = chars[Math.floor(Math.random() * chars.length)];
        particles.push({ x, y, char });
      }
    }
  }
  particles.forEach(p => {
    ctxCountdown.fillStyle = '#ff4eb8';
    ctxCountdown.font = '16px monospace';
    ctxCountdown.fillText(
      p.char,
      canvasCountdown.width / 2 - tempCanvas.width / 2 + p.x,
      canvasCountdown.height / 2 - tempCanvas.height / 2 + p.y
    );
  });
}

// Ch·∫°y: hi·ªán ch·ªØ ‚Üí ƒë·∫øm ng∆∞·ª£c ‚Üí c√¢u h·ªèi
setTimeout(() => {
  showPreMessage().then(() => {
    const interval = setInterval(() => {
      drawNumberAsChars(numbers[currentIndex]);
      currentIndex++;
      if (currentIndex >= numbers.length) {
        clearInterval(interval);
        setTimeout(() => {
          ctxCountdown.clearRect(0, 0, canvasCountdown.width, canvasCountdown.height);
          startQuestionFlow();
        }, 1000);
      }
    }, 1000);
  });
}, 2000);

// ---------- PH·∫¶N C√ÇU H·ªéI ----------
const positiveAnswers = [
  "T√¥i bi·∫øt m√† hihi",
  "T√¥i c≈©ng th√≠ch b·∫°n nhi·ªÅu l·∫Øm ‚ù§"
];
const negativeLoop = [
  "Ch·∫Øc ch·∫Øn ch·ª©?",
  "Suy nghƒ© kƒ© ch∆∞a?",
  "Suy nghƒ© l·∫°i ƒëi...",
  "NƒÉn n·ªâ m√†...",
  "H·ªèi l·∫°i nh√©, b·∫°n th√≠ch t√¥i kh√¥ng?",
  "B·∫°n th√≠ch t√¥i kh√¥ng?"
];
const finalText = `Em √†, trong cu·ªôc s·ªëng c·ªßa anh, em nh∆∞ m·ªôt vi√™n ng·ªçc qu√Ω m√† nh√¢n duy√™n ƒë√£ ban t·∫∑ng. M·ªói ng√†y tr√¥i qua, anh c√†ng nh·∫≠n ra gi√° tr·ªã c·ªßa em kh√¥ng ch·ªâ n·∫±m ·ªü v·∫ª ƒë·∫πp b√™n ngo√†i m√† c√≤n ·ªü t√¢m h·ªìn ·∫•m √°p v√† tr√°i tim ch√¢n th√†nh. Em l√† ngu·ªìn ƒë·ªông l·ª±c gi√∫p anh v∆∞·ª£t qua nh·ªØng kh√≥ khƒÉn, l√† ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh lu√¥n s·∫µn s√†ng l·∫Øng nghe v√† chia s·∫ª. Nh·ªØng kho·∫£nh kh·∫Øc b√™n em, t·ª´ nh·ªØng ti·∫øng c∆∞·ªùi ƒë·∫øn nh·ªØng gi√¢y ph√∫t l·∫∑ng im, ƒë·ªÅu tr·ªü th√†nh nh·ªØng k·ª∑ ni·ªám qu√Ω gi√° m√† anh s·∫Ω tr√¢n tr·ªçng m√£i m√£i. Em kh√¥ng ch·ªâ l√† ng∆∞·ªùi y√™u, m√† c√≤n l√† √°nh s√°ng d·∫´n ƒë∆∞·ªùng trong cu·ªôc s·ªëng c·ªßa anh. Anh c·∫£m th·∫•y may m·∫Øn v√† bi·∫øt ∆°n v√¨ c√≥ em b√™n c·∫°nh, v√† anh s·∫Ω lu√¥n n·ªó l·ª±c ƒë·ªÉ b·∫£o v·ªá v√† g√¨n gi·ªØ vi√™n ng·ªçc qu√Ω n√†y.`;

let questionState = 'askLike';
let positiveIndex = 0;
let negativeIndex = 0;

function startQuestionFlow() {
  questionState = 'askLike';
  positiveIndex = 0;
  negativeIndex = 0;
  updateQuestion("B·∫°n c√≥ th√≠ch t√¥i kh√¥ng?");
  showQuestionBox();
  document.getElementById('yesBtn').style.display = 'inline-block';
  document.getElementById('yesBtn').textContent = 'C√≥';
  document.getElementById('noBtn').style.display = 'inline-block';
  document.getElementById('thankBtn').style.display = 'none';
  document.getElementById('message').textContent = '';
}

function updateQuestion(text) {
  document.getElementById('question-text').textContent = text;
  document.getElementById('message').textContent = '';
}
function showQuestionBox() {
  document.getElementById('question-box').classList.remove('hidden');
}

async function typeWriter(text, element) {
  element.textContent = '';
  for (let i = 0; i < text.length; i++) {
    element.textContent += text.charAt(i);
    await new Promise(resolve => setTimeout(resolve, 50));
  }
}

document.getElementById('yesBtn').addEventListener('click', async () => {
  if (questionState === 'askLike' || questionState === 'negative') {
    questionState = 'positive';
    if (positiveIndex < positiveAnswers.length) {
      updateQuestion(positiveAnswers[positiveIndex]);
      positiveIndex++;
      if (positiveIndex === 1) document.getElementById('noBtn').style.display = 'none';
      document.getElementById('yesBtn').textContent = 'OK';
    }
  } else if (questionState === 'positive') {
    if (positiveIndex < positiveAnswers.length) {
      updateQuestion(positiveAnswers[positiveIndex]);
      positiveIndex++;
    } else {
      document.getElementById('yesBtn').style.display = 'none';
      document.getElementById('question-text').textContent = '';
      const messageElem = document.getElementById('message');
      await typeWriter(finalText, messageElem);
      document.getElementById('thankBtn').style.display = 'inline-block';
    }
  }
});

document.getElementById('noBtn').addEventListener('click', () => {
  if (negativeIndex >= negativeLoop.length) negativeIndex = 0;
  questionState = 'negative';
  updateQuestion(negativeLoop[negativeIndex]);
  negativeIndex++;
});

document.getElementById('thankBtn').addEventListener('click', () => {
  document.getElementById('thankBtn').style.display = 'none';
  document.getElementById('message').textContent = '';
  document.getElementById('question-text').textContent = '';
  document.getElementById('yesBtn').style.display = 'none';
  document.getElementById('noBtn').style.display = 'none';
  const questionBox = document.getElementById('question-box');
  questionBox.innerHTML = '<div style="color:#ff4eb8;font-size:32px;font-weight:bold;text-align:center;margin-top:100px;text-shadow:0 0 5px #ff4eb8,0 0 10px #ff4eb8,0 0 20px #ff4eb8,0 0 30px #ff4eb8;">Anh y√™u em! üíñ</div>';
  questionBox.classList.remove('hidden');
});

// Kh√≥a xoay ngang n·∫øu ƒë∆∞·ª£c
if (screen.orientation && screen.orientation.lock) {
  screen.orientation.lock("landscape").catch(e => console.log("Kh√¥ng th·ªÉ kh√≥a m√†n h√¨nh:", e));
}
